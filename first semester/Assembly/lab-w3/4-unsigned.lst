     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a-word; b,c,d-byte; e-doubleword; x-qword - unsigned
    14 00000000 0F00                        a dw 15
    15 00000002 14                          b db 20
    16 00000003 23                          c db 35
    17 00000004 1E                          d db 30
    18 00000005 05000000                    e dd 5
    19 00000009 3C00000000000000            x dq 60
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ;(a*2+b/2+e)/(c-d)+x/a=(30+10+5)/5+60/15
    25                                          ;9+4=13
    26                                          
    27 00000000 A1[09000000]                    mov EAX, dword [x+0]
    28 00000005 8B15[0D000000]                  mov EDX, dword [x+4]
    29                                          
    30 0000000B 668B0D[00000000]                mov CX,[a]
    31 00000012 66BB0000                        mov BX,0
    32 00000016 6653                            push BX;
    33 00000018 6651                            push CX;
    34 0000001A 59                              pop ECX;ECX=a
    35                                          
    36 0000001B F7F1                            div ECX;EAX=x/a
    37 0000001D 89C3                            mov EBX,EAX;EBX=x/a=4
    38                                          
    39 0000001F 66A1[00000000]                  mov AX,[a]
    40 00000025 66B90200                        mov CX,2
    41 00000029 66F7E1                          mul CX;DX:AX=a*2=30
    42                                          
    43 0000002C 66BA0000                        mov DX,0
    44 00000030 6652                            push DX
    45 00000032 6650                            push AX
    46 00000034 58                              pop EAX;EAX=a*2
    47 00000035 89C1                            mov ECX,EAX;ECX=a*2
    48                                          
    49 00000037 A0[02000000]                    mov AL,[b]
    50 0000003C B400                            mov AH,0;AX=b
    51 0000003E B202                            mov DL,2
    52 00000040 F6F2                            div DL;AL=b/2
    53 00000042 B400                            mov AH,0;AX=b/2
    54                                          
    55 00000044 66BA0000                        mov DX,0
    56 00000048 6652                            push DX
    57 0000004A 6650                            push AX
    58 0000004C 58                              pop EAX;EAX=b/2
    59                                          
    60 0000004D 01C1                            add ECX,EAX;ECX=a*2+b/2
    61 0000004F 030D[05000000]                  add ECX,[e];ECX=a*2+b/2+e
    62 00000055 89C8                            mov EAX,ECX;EAX=a*2+b/2+e
    63                                          
    64 00000057 50                              push EAX
    65 00000058 6658                            pop AX
    66 0000005A 665A                            pop DX;EAX=>DX:AX=(a*2+b/2+e)
    67                                          
    68 0000005C 8A0D[03000000]                  mov CL,[c]
    69 00000062 2A0D[04000000]                  sub CL,[d];CL=c-d
    70 00000068 B500                            mov CH,0;CX=c-d
    71                                          
    72                                          
    73 0000006A 66F7F1                          div CX;AX=(a*2+b/2+e)/(c-d)
    74                                          
    75 0000006D 66BA0000                        mov DX,0
    76 00000071 6652                            push DX
    77 00000073 6650                            push AX
    78 00000075 58                              pop EAX;EAX=(a*2+b/2+e)/(c-d)
    79                                          
    80 00000076 01D8                            add EAX,EBX;EAX=(a*2+b/2+e)/(c-d)+x/a
    81                                         
    82                                          
    83                                          ; exit(0)
    84 00000078 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    85 0000007A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
