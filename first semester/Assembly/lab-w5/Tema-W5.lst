     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;Two byte strings S1 and S2 are given, having the same length. Obtain the string D in the following way: each element found on the even positions of D is the sum of the corresponding elements from S1 and S2, and
    14                                      ;ex:
    15                                      ;S1: 1, 2, 3, 4
    16                                      ;S2: 5, 6, 7, 8
    17                                      ;D: 6, -4, 10, -4
    18                                      ;  06h FCh 0Ah FCh 
    19                                      
    20 00000000 01020304                    s1 db 1,2,3,4
    21 00000004 05060708                    s2 db 5,6,7,8
    22                                      lens equ $-s2 
    23 00000008 00<rept>                    d times lens db 0 
    24 0000000C 0200                        two dw 2
    25                                      
    26                                      
    27                                      
    28                                      
    29                                      
    30                                  segment code use32 class=code
    31                                      start:
    32 00000000 B904000000                      mov ecx,lens
    33 00000005 BE00000000                      mov esi,0
    34 0000000A E340                            jecxz stop ;check to not enter the loop if ecx = 0
    35                                          
    36                                              repeta:
    37                                              
    38 0000000C 89F0                                mov eax,esi
    39 0000000E 50                                  push eax
    40 0000000F 6658                                pop ax
    41 00000011 665A                                pop dx; DX:AX=ESI
    42 00000013 66F735[0C000000]                    div word [two] ;DX=ESI%2
    43 0000001A 6689D0                              mov ax,dx
    44 0000001D 6683F800                            cmp ax,0
    45 00000021 7514                                jne isodd
    46                                                  ;This is for the even numbers
    47 00000023 8A9E[00000000]                          mov bl,[s1+esi]
    48 00000029 029E[04000000]                          add bl,[s2+esi]
    49 0000002F 889E[08000000]                          mov [d+esi],bl
    50 00000035 EB12                                    jmp nextone ;this jump is used so the "isodd" loop is ignored for even numbers
    51                                  
    52                                              isodd:
    53                                                  ;This is for the odd numbers
    54 00000037 8A9E[00000000]                          mov bl,[s1+esi]
    55 0000003D 2A9E[04000000]                          sub bl,[s2+esi]
    56 00000043 889E[08000000]                          mov [d+esi],bl
    57                                                  
    58                                              nextone:
    59                                              
    60 00000049 46                                  inc esi
    61 0000004A E2C0                                loop repeta
    62                                          
    63                                          stop:
    64                                          
    65                                      
    66                                          ; exit(0)
    67 0000004C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 0000004E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
